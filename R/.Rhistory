library(MASS)
setwd("~/Desktop/R Studio/RStudio_mycode/RStudio_customization-for-me/R")
options(scipen = 999) # scientific notation to decimal points
# 1. If data file extension is '.txt'
# 'delim': reads data with boundaries made with TAB
# **naming is arbitrary. Fill in file name accordingly.
data <- read.delim("~/Desktop/R Studio/RStudio_mycode/data.txt") # file has to be inside directory folder
df <- Cars93
View(df)
library(psych) # includes "describe" function
str(df) # use to check variable type (Factor, num, int, etc.)
summary(subset(df, select = c(MPG.city, Price, DriveTrain))) # subset: shows selected variables
describe(df[c("MPG.city", "Price", "DriveTrain")]) # includes SD, median, mean, skew/kurtosis, N-size
# (mode requires additional package) : while suitable for nominal scale, not so much for continuous variables.
library(modeest)
mfv(df$DriveTrain)
mfv(df$Price)
# 1. frequency distribution of QUALITATIVE data
qual.data <- df$DriveTrain
quant.data <- df$MPG.city
hist(quant.data)
barplot(table(qual.data), ylim=c(0,80), xlab="x_name",
ylab="y_name", axis.lty="solid", space=1,
main="PLOT_NAME")
hist(quant.data)
barplot(table(qual.data), ylim=c(0,80), xlab="x_name",
ylab="y_name", axis.lty="solid", space=1,
main="PLOT_NAME")
describe(df[c("MPG.city", "Price", "DriveTrain")]) # includes SD, median, mean, skew/kurtosis, N-size
str(df) # use to check variable type (Factor, num, int, etc.)
describe(df[c("MPG.city", "Price", "DriveTrain")]) # includes SD, median, mean, skew/kurtosis, N-size
summary(subset(df, select = c(MPG.city, Price, DriveTrain))) # subset: shows selected variables
pnorm(1.33, 0, 1)
qnorm(0.9082409, 0, 1)
1-pnorm(1.33, 0, 1)
1-qnorm(0.9082409, 0, 1)
df <- Cars93
view(df)
View(df)
lex <- c(47, 89, 131, 186, 245, 284, 362, 444, 553, 627)
gram <- c(0, 2, 1, 3, 5, 9, 7, 16, 25, 34)
plot(gram ~ lex, main="Vocabulary size and grammatical complexity", xlab="Productive vocabulary size", ylab="Grammatical complexity score")
lines(lowess(gram ~ lex))
cor(gram, lex, method="spearman")
cor(rank(gram), rank(lex)) # using pearson
cor.test(gram, lex, method="spearman", alternative="greater")
cor.test(gram, lex, method="kendall", alternative="greater")
df.sub <- subset(df, select=c(Horsepower, Price, MPG.city, RPM))
pairs(df.sub)
chart.Correlation(df.sub, histogram=TRUE, method="pearson", pch=19)
library(PerformanceAnalytics) # using package: PerformanceAnalytics
chart.Correlation(df.sub, histogram=TRUE, method="pearson", pch=19)
pairs(df.sub) # scatter plot matrix
chart.Correlation(df.sub, histogram=TRUE, method="pearson", pch=19)
pairs(df.sub) # scatter plot matrix
chart.Correlation(df.sub, histogram=TRUE, method="pearson", pch=19) # 'histogram=TRUE' --> displays histogram
cor.test(df$Horsepower, df$Price, alternative=c("two.sided", method="pearson", conf.level=0.95))
cor.test(df$Horsepower, df$Price, alternative=c("two.sided"), method="pearson", conf.level=0.95)
library(psych)
corr.test(df$Horsepower, df$Price, use="pairwise", method="pearson", alpha=.05)
corr.test(df$Horsepower, df$Price, use="pairwise", method="pearson", alpha=.05, short=FALSE)
corr.test(df$Horsepower, df$Price, use="pairwise", method="pearson", alpha=.05)
# 3. Fisher's Z-transformation
# Why? To transform the sampling distribution of Pearson's r into a normal distribution.
fisher <- fisherz(0.7882176) # rho = 'r' value derived from above test.
fisher
fish <- function(r) {0.5*(log(1+r)-log(1-r))} # define function
fish(0.7882176)
View(df)
library(car)
scatterplot(Price ~ Horsepower|USA, data=df,
regLine=FALSE, grid=FALSE, bty="1", legend=FALSE, smooth=FALSE, col="black")
scatterplot(Price ~ Horsepower|Origin, data=df,
regLine=FALSE, grid=FALSE, bty="1", legend=FALSE, smooth=FALSE, col="black")
scatterplot(Price ~ Horsepower|Origin, data=df,
regLine=FALSE, grid=FALSE, legend=FALSE, smooth=FALSE, col="black")
pairs(df.sub, pch=19)
pairs(df.sub, pch=19, lower.panel=NULL)
# example 2: displaying different colors --> my_cols
my_cols <- c("#E7B800", "#FC4E07")
pairs(df.sub, pch=19, cex=0.5, col=my_cols[df$Origin], lower.panel=NULL)
# example 2: displaying different colors --> my_cols
my_cols <- c("#00AFBB", "#FC4E07")
pairs(df.sub, pch=19, cex=0.5, col=my_cols[df$Origin], lower.panel=NULL)
plot(df$Price, df$Horsepower, col=my_cols[df$Origin])
plot(df$Price, df$Horsepower, pch=19 col=my_cols[df$Origin])
plot(df$Price, df$Horsepower, pch=19, col=my_cols[df$Origin])
plot(df$Price, df$Horsepower, pch=19, cex=0.5, col=my_cols[df$Origin])
plot(df$Price, df$Horsepower, pch=19, cex=1.0, col=my_cols[df$Origin])
plot(df$Price, df$Horsepower, pch=19, cex=0.8, col=my_cols[df$Origin])
